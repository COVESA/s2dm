"""Example of an object type with various field modifiers in GraphQL."""
type TestTypeModifiers {
    # A - field.case.DEFAULT
    """Example (A.1) DEFAULT with scalar output type"""
    defaultScalar: Boolean
    """Example (A.2) DEFAULT with object output type"""
    defaultType: ExampleType
    """Example (A.3) DEFAULT with object output type with instances"""
    defaultWithInstances: ExampleTypeWithInstances


    # B - field.case.NON_NULL
    """Example (B.1) NON_NULL with scalar output type"""
    nonNullScalar: Boolean!
    """Example (B.2) NON_NULL with object output type"""
    nonNull: ExampleType!
    """Example (B.3) NON_NULL with object output type with instances"""
    nonNullWithInstances: ExampleTypeWithInstances!

    # C - field.case.LIST
    #listScalar: [Boolean]
    #list: [ExampleType]
    #listWithInstances: [ExampleTypeWithInstances]

    # D - field.case.NON_NULL_LIST
    #nonNullListScalar: [Boolean]!
    #nonNullList: [ExampleType]!
    #nonNullListWithInstances: [ExampleTypeWithInstances]!

    # E - field.case.LIST_NON_NULL
    #listNonNullScalar: [Boolean!]
    #listNonNull: [ExampleType!]
    #listNonNullWithInstances: [ExampleTypeWithInstances!]

    # F - field.case.NON_NULL_LIST_NON_NULL
    #nonNullListNonNullScalar: [Boolean!]!
    #nonNullListNonNull: [ExampleType!]!
    #nonNullListNonNullWithInstances: [ExampleTypeWithInstances!]!

    # G - field.case.SET
    #setScalar: [Boolean] @noDuplicates
    #set: [ExampleType] @noDuplicates
    #setWithInstances: [ExampleTypeWithInstances] @noDuplicates

    # H - field.case.SET_NON_NULL
    #setNonNullScalar: [Boolean!] @noDuplicates
    #setNonNull: [ExampleType!] @noDuplicates
    #setNonNullWithInstances: [ExampleTypeWithInstances!] @noDuplicates

}

type ExampleType {
    someField: Boolean
    someFieldWithEnum: SomeEnum
}

enum SomeEnum {
    ONE
    TWO
    THREE
    FOUR
    FIVE
}

type ExampleTypeWithInstances {
    instanceTag: ExampleTypeInstance
    anotherField: Boolean
}

type ExampleTypeInstance @instanceTag {
    letter: LetterEnum
    number: NumberEnum
}

enum LetterEnum {
    A
    B
}

enum NumberEnum {
    ONE
    TWO
}
